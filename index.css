@import url("https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100;0,200;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,600;1,700&family=Roboto:ital,wght@0,400;0,500;0,900;1,100&family=Shadows+Into+Light&display=swap");
@import url("https://fonts.googleapis.com/icon?family=Material+Icons");
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100;0,200;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,600;1,700&family=Roboto:wght@100&display=swap");

/* @tailwind base; */
@tailwind components;
@tailwind utilities;

body {
  background-color: black;
  margin: 0;
  padding: 0;
  color: white;
  color: #cccccc;
  /* font-family: "Roboto Mono"; */
  font-family: "Noto Sans";
  overflow: hidden;
  font-size: small;
}

/* Define styles for rainbow brackets, up to a fixed number of nesting levels */
.rainbow-bracket-0 {
  color: #e06c75;
}
.rainbow-bracket-1 {
  color: #e5c07b;
}
.rainbow-bracket-2 {
  color: #98c379;
}
.rainbow-bracket-3 {
  color: #56b6c2;
}
.rainbow-bracket-4 {
  color: #61afef;
}
.rainbow-bracket-5 {
  color: #c678dd;
}
/* Add more as needed */

/* Monaco editor token identifiers */

.monaco-editor .program {
  font-weight: bold;
  font-size: 12;
  color: #d4d4d4; /* Light grey, assuming default text color */
}
.monaco-editor .assignment {
  color: #569cd6; /* Blue */
}

.monaco-editor .conditionalAssignment {
  color: #569cd6; /* Blue, similar to assignment for consistency */
}

.monaco-editor .expr {
  color: #c586c0; /* Soft purple */
}

.monaco-editor .binaryExpr {
  color: #c586c0; /* Soft purple, similar to expr for logical grouping */
}

.monaco-editor .unaryExpr {
  color: #c586c0; /* Soft purple, keeping consistent with expressions */
}

.monaco-editor .code {
  color: #ce9178; /* Soft orange, consider differentiating if needed */
}

.monaco-editor .operator {
  color: #d4d4d4; /* Light grey, consider changing if too similar to text */
}

.monaco-editor .number {
  color: #dcdcaa; /* Light mustard */
}
.monaco-editor .boolean {
  color: #9de18b;
}

.monaco-editor .text {
  color: #d4d4d4; /* Light grey */
}

.monaco-editor .comment {
  color: #6a9955; /* Soft green */
}
.monaco-editor .multilineComment {
  color: #6a9955; /* Soft green */
}

.monaco-editor .templateVariable {
  color: #4ec9b0; /* Bright teal, similar to template for consistency */
}

.monaco-editor .urlFunction {
  color: #4789ac;
}

.monaco-editor .list {
  color: #c7ca6c;
}
.monaco-editor .entry {
  color: #6ccac7;
}

.monaco-editor .template {
  /* background-color: #4ec9b0; */
  color: #4ec9b0; /* Bright teal */
}

.monaco-editor .stringLiteral {
  color: #ce9178; /* Soft orange */
}

.monaco-editor .identifier {
  color: #9cdcfe; /* Light blue */
}

.monaco-editor .transform {
  color: #2f955a; /* Light blue */
}

.monaco-editor .transformExpr {
  color: #c18be7; /* Light blue */
}

.monaco-editor .state-value {
  background-color: rgba(86, 228, 20, 0.1);
}

.monaco-editor .error {
  background-color: rgba(255, 0, 0, 0.1);
}

#loading-screen {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #000; /* Set background to black */
}

.spinner {
  max-width: 25vw; /* Adjust size as needed */
  max-height: 25vh; /* Adjust size as needed */
  animation: spin 1.5s cubic-bezier(0.65, 0.05, 0.36, 1) infinite,
    fadeIn 1s forwards;
  filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5)); /* Subtle glow */
  opacity: 0;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

@keyframes pulseBackground {
  0% {
    background-color: #fff;
  }
  50% {
    background-color: #fffae6;
  }
  100% {
    background-color: #fff;
  }
}

.pulse {
  animation: pulseBackground 1s ease-in-out;
}

.inactive {
  position: relative;
  box-sizing: border-box;
  transition: all 0.3s ease;
}
.inactive:not(.inactive .inactive)::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.3);
  pointer-events: none;
  border-radius: 8px;
  z-index: 1;
}
